##
## -------- One dimension - File Random as InputStream --------
## @param parameterAssignName with the parameter assignment name
##
##
#macro(generateItemFileRandomAsInputStream $parameterAssignName $randomUtilsClassName)
		final java.util.Random rnd${parameterAssignName} = new java.util.Random() ;
		
		final String ${parameterAssignName}String = ${randomUtilsClassName}.getXmlValidString(rnd${parameterAssignName}, MAX_ARRAY_SIZE, false).trim() ;
		
		// Printout the '${parameterAssignName}' value
		System.out.println("[${operationId}] -> '${parameterAssignName}' value: " + ${parameterAssignName}String) ;
		
		final InputStream ${parameterAssignName} = new ByteArrayInputStream(${parameterAssignName}String.getBytes()) ;
#end
##
##
##
## ---------- One dimension - File Random as bytes ------------
## @param parameterAssignName with the parameter assignment name
##
##
#macro(generateItemFileRandomAsBytes $parameterAssignName $randomUtilsClassName)
		final java.util.Random rnd${parameterAssignName} = new java.util.Random() ;
		
		final String ${parameterAssignName} = ${randomUtilsClassName}.getXmlValidString(rnd${parameterAssignName}, MAX_ARRAY_SIZE, false).trim() ;
		
		// Printout the '${parameterAssignName}' value
		System.out.println("[${operationId}] -> '${parameterAssignName}' value: " + ${parameterAssignName}) ;
#end
##
##
## -------- One dimension - random generator --------
## @param isSimpleTypeOneDim  true if the type is simple (boolean, integer, long, float or double)
## @param outputTypeOneDim    with the output type
## @param randomMethodOneDim  with the random method
## @param parameterAssignName with the parameter assignment name
##
##
#macro(generateOneDimensionRandom $isSimpleTypeOneDim $outputTypeOneDim $randomMethodOneDim $parameterAssignName)
#if (${isSimpleTypeOneDim} == "true")
		final java.util.Random rnd${parameterAssignName} = new java.util.Random() ;
    
		final ${outputTypeOneDim} ${parameterAssignName} = ${randomMethodOneDim} ;
#else
		final ${outputTypeOneDim} ${parameterAssignName} = new ${outputTypeOneDim}() ;
		${parameterAssignName}.${randomMethodOneDim} ;
#end

		// Printout the '${parameterAssignName}' value
		System.out.println("[${operationId}] -> '${parameterAssignName}' value: " + ${parameterAssignName}) ;
#end
##
##
## -------- Multiple dimensions - Array random generator --------
## @param arrayBaseJavaType   with the Java base type for the array
## @param isSimpleTypeArray   true if it is a simple type (boolean, integer, long, float or double)
## @param arrayDepth		  with the array depth
## @param randomMethodArray   with the random method to be filled
## @param parameterAssignName with the parameter assignment name
##
##
#macro(generateArrayRandom $arrayBaseJavaType $isSimpleTypeArray $arrayDepth $randomMethodArray $parameterAssignName)
#set($arrayDepthStringDef = "") ## ------ STRING - VARIABLE DEFINITION ------
#set($arrayDepthStringIns = "") ## ------ STRING - VARIABLE INSTANTATION ------
#set($arrayDepthStringPos = "") ## ------ STRING - VARIABLE ACCESS AND ASSIGNMENT ------
#foreach($depth in [1..${arrayDepth}])
#set($arrayDepthStringDef = "${arrayDepthStringDef}[]")
#set($arrayDepthStringIns = "${arrayDepthStringIns}[MAX_ARRAY_SIZE]")
#set($arrayDepthStringPos = "${arrayDepthStringPos}[i${depth}]")
#end
		final java.util.Random rnd${parameterAssignName} = new java.util.Random() ;

		final ${arrayBaseJavaType}${arrayDepthStringDef} ${parameterAssignName} = new ${arrayBaseJavaType}${arrayDepthStringIns} ;

#foreach($depth in [1..${arrayDepth}])
	#tabsGenerator($depth)for (int i${depth}=0 ; i${depth} < MAX_ARRAY_SIZE ; i${depth}++)
	#tabsGenerator($depth){
#end
#set($tabNumberCodeGen = ${arrayDepth}+1)
#if (${isSimpleTypeArray} == "true")
	#tabsGenerator(${tabNumberCodeGen})${parameterAssignName}${arrayDepthStringPos} = ${randomMethodArray} ;
#else
	#tabsGenerator(${tabNumberCodeGen})${parameterAssignName}${arrayDepthStringPos} = new ${arrayBaseJavaType}() ;
	#tabsGenerator(${tabNumberCodeGen})${parameterAssignName}${arrayDepthStringPos}.${randomMethodArray} ;
#end

	#tabsGenerator(${tabNumberCodeGen})// Printout the return value
	#tabsGenerator(${tabNumberCodeGen})System.out.println("[${operationId}] -> Array index '${parameterAssignName}': " + ${parameterAssignName}${arrayDepthStringPos}) ;
#foreach($depth in [${arrayDepth}..1])
	#tabsGenerator($depth)}

#end
#end