#parse(${CommonJavaMacros})
#parse(${RandomGeneratorJavaMacros})
#parse(${ClientExampleJavaMacros})

/*********************************************************************************************************************************
 This class has been automatically generated using KLTT-APIRestGenerator project, don't do manual file modifications.
 ${now}

 "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;
  and to You under the Apache License, Version 2.0. "
**********************************************************************************************************************************/

package ${packageName} ;

import java.io.InputStream ;
import java.io.ByteArrayInputStream ;

#foreach($additionalImport in $additionalImports)
import ${additionalImport} ;
#end

/**
 * ------------------------------------------------
 * @author Francisco Manuel Benitez Chico
 * ------------------------------------------------
 */
public class ${className}
{
	/** Max array size for the tests */
	private static int MAX_ARRAY_SIZE 			 = 2 ;
	
	/** Clear instances for the tests */
	private static boolean CLEAR 	  			 = true ;
	
	/** Current number of recursive calls */
	private static int CURR_RECURSIVE_CALLS 	 = 0 ;

	/** Max number of recursive calls */
	private static int MAX_RECURSIVE_CALLS 		 = 4 ;

	/** Attribute - Rest Listener */
	private ${restListenerInterfaceName} restListener ;
	
	/** Attribute - Rest Handler */
	private ${restHandlerInterfaceName} restHandler ;
	
	/**
	 * Public constructor
	 */
	public ${className}()
	{
		this.restListener = new ${restListenerExampleClassName}() ;
		this.restHandler  = new ${restHandlerClassName}(this.restListener) ;
	}
	
	/**
	 * Do client test for all the operations
	 */
	public void doTests()
	{
#foreach($pathValue in ${outputLanguagePaths.getPathValues()})
## DELETE
#set($pathOperation = "DELETE")
#generateTestCall(${pathValue} ${pathOperation})
## GET
#set($pathOperation = "GET")
#generateTestCall(${pathValue} ${pathOperation})
## HEAD
#set($pathOperation = "HEAD")
#generateTestCall(${pathValue} ${pathOperation})
## OPTIONS
#set($pathOperation = "OPTIONS")
#generateTestCall(${pathValue} ${pathOperation})
## POST
#set($pathOperation = "POST")
#generateTestCall(${pathValue} ${pathOperation})
## PUT
#set($pathOperation = "PUT")
#generateTestCall(${pathValue} ${pathOperation})
#end
	}
	
## Generate all the functions body which test all the API
#foreach($pathValue in ${outputLanguagePaths.getPathValues()})
## DELETE
#set($pathOperation = "DELETE")
#startTestMethodBody(${pathValue} ${pathOperation})
## GET
#set($pathOperation = "GET")
#startTestMethodBody(${pathValue} ${pathOperation})
## HEAD
#set($pathOperation = "HEAD")
#startTestMethodBody(${pathValue} ${pathOperation})
## OPTIONS
#set($pathOperation = "OPTIONS")
#startTestMethodBody(${pathValue} ${pathOperation})
## POST
#set($pathOperation = "POST")
#startTestMethodBody(${pathValue} ${pathOperation})
## PUT
#set($pathOperation = "PUT")
#startTestMethodBody(${pathValue} ${pathOperation})
#end
	
	/**
	 * @param args with the arguments
	 */
	public static void main(final String[] args)
	{
		${className} launcherExample = new ${className}() ;
		launcherExample.doTests() ;
	}
}
