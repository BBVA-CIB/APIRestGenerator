/*********************************************************************************************************************************
 This class has been automatically generated using KLTT-APIRestGenerator project, don't do manual file modifications.
 ${now}

 "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;
  and to You under the Apache License, Version 2.0. "
**********************************************************************************************************************************/

package ${packageName} ;

import java.io.InputStream ;

import javax.ws.rs.client.Client ;
import javax.ws.rs.client.ClientBuilder ;
import javax.ws.rs.client.Entity ;
import javax.ws.rs.client.Invocation ;
import javax.ws.rs.client.WebTarget ;
import javax.ws.rs.core.Form ;
import javax.ws.rs.core.MediaType ;
import javax.ws.rs.core.Response ;

import org.glassfish.jersey.media.multipart.FormDataMultiPart ;
import org.glassfish.jersey.media.multipart.MultiPartFeature ;
import org.glassfish.jersey.media.multipart.file.StreamDataBodyPart ;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider ;

#foreach($additionalImport in $additionalImports)
import ${additionalImport} ;
#end

/**
 * ------------------------------------------------
 * @author Francisco Manuel Benitez Chico
 * ------------------------------------------------
 */
## Common variables for all the generations
##   Host
#set($host         = ${outputLanguageRootValues.getHost()})
## Client Base Path
#set($clientBasePath = ${outputLanguageRootValues.getClientBasePath()})
##
##
public final class ${className} implements ${restHandlerInterfaceClassName}
{
	/** Attribute - Rest Listener */
	private final ${restListenerInterfaceName} restListener ;
	
	/** Attribute - Client */
	private final Client client ;

    /**
	 * Public constructor
	 * @param restListener with the Rest Listener
	 */
	public ${className}(final ${restListenerInterfaceName} restListener) 
	{
		this.restListener = restListener ;
		
		this.client 	  = ClientBuilder.newClient() ;
		this.client.register(JacksonJsonProvider.class) ;
		this.client.register(MultiPartFeature.class) ;
	}

#foreach($pathValue in ${outputLanguagePaths.getPathValues()})
## DELETE
#set($pathOperation = "DELETE")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersClientJaxrsImplTemplate})
#end
## GET
#set($pathOperation = "GET")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersClientJaxrsImplTemplate})
#end
## HEAD
#set($pathOperation = "HEAD")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersClientJaxrsImplTemplate})
#end
## OPTIONS
#set($pathOperation = "OPTIONS")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersClientJaxrsImplTemplate})
#end
## POST
#set($pathOperation = "POST")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersClientJaxrsImplTemplate})
#end
## PUT
#set($pathOperation = "PUT")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersClientJaxrsImplTemplate})
#end
#end
}
