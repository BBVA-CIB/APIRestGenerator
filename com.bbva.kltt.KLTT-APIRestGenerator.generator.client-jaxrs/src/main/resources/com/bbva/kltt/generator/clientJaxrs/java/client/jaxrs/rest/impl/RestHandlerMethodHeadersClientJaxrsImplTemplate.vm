#parse(${CommonJavaMacros})
#parse(${RestHandlerMethodHeadersClientJaxrsImplMacros})
##
##
## Available Schemes
#set($availableSchemes    	    = ${outputLanguageRootValues.getSchemes(${pathValue}, ${pathOperation})})
##
##
## Url without scheme ("://" + host + clientBasePath + pathValue)
#set($urlWithoutScheme 		    = "://${outputLanguageNaming.getUrlWithSlashes(${host}, ${clientBasePath}, ${pathValue})}")
##
##
## Content type (Inbound + Outbound)
#set($contentTypeInboundServer  = ${outputLanguageConsumesProduces.generateInboundServerContentType(${pathValue}, ${pathOperation})})
#if (! $contentTypeInboundServer || '"multipart/form-data"' != $contentTypeInboundServer)
#set($contentTypeInboundServer	   		    = '"application/json"')
#end
#set($contentTypeOutboundServer = ${outputLanguageConsumesProduces.generateOutboundServerContentType(${pathValue}, ${pathOperation})})
#if (! $contentTypeOutboundServer || '"multipart/form-data"' != $contentTypeOutboundServer)
#set($contentTypeOutboundServer	   		    = '"application/json"')
#end
##
##
## Operation identifier
#set($operationId        	    = ${outputLanguageOperations.getOperationId(${pathValue}, ${pathOperation})})
##
##
## Output parameters
##
#set($outputParameters 	 	    = ${outputLanguageParameters.generateAllOutputParameters(${pathValue}, ${pathOperation})})
##
##
## Path parameters
#set($outputParametersPath      = ${outputLanguageParameters.generateOutputParametersPath(${pathValue}, ${pathOperation})})
##
## Query parameters
#set($outputParametersQuery     = ${outputLanguageParameters.generateOutputParametersQuery(${pathValue}, ${pathOperation})})
##
## Header parameters
#set($outputParametersHeader    = ${outputLanguageParameters.generateOutputParametersHeader(${pathValue}, ${pathOperation})})
##
## FormData parameters
#set($outputParametersFormData  = ${outputLanguageParameters.generateOutputParametersFormData(${pathValue}, ${pathOperation})})
##
## Body parameter
#set($outputParameterBody 	    = ${outputLanguageParameters.generateOutputParameterBody(${pathValue}, ${pathOperation})})
##
##
## Return type
#set($returnType         	    = ${outputLanguageItems.getOutboundServerItemType(${pathValue}, ${pathOperation})})
#set($returnTypeField    	    = ${outputLanguageItems.getFullTypeOutput($returnType.item)})
##
##
#parse(${MethodCommentsJavaTemplate})
## Header parameters
#set($headerParameters		    = "final ${schemesValuesClassName} scheme")
#if (${outputParameters.getParametersList().size()} > 0)
#set($headerParameters		    = "${headerParameters}, ${outputParameters.getParametersHeader()}")
#end
	public void ${operationId}(${headerParameters})
	{
		// Validate the input scheme
		final boolean isValidInputScheme = this.${operationId}ValidateScheme(scheme) ;
		if (!isValidInputScheme)
		{
			this.restListener.${operationId}ValidationError("Invalid scheme '" + scheme + "' for the operation") ;
		}
		else
		{
			// URL with scheme
			final String urlWithScheme	 		 = scheme + "${urlWithoutScheme}" ;
		
			// Webtarget instance with all the info
			WebTarget webTarget 				 = this.client.target(urlWithScheme) ;

#if (${outputParametersPath.getParametersList().size()} > 0)
			// Add all the "path" values
			webTarget     						 = this.${operationId}PathAssignment(webTarget, ${outputParametersPath.getParametersCall()}) ;
#end

#if (${outputParametersQuery.getParametersList().size()} > 0)
			// Add all the "query" values
			webTarget  							 = this.${operationId}QueryAssignment(webTarget, ${outputParametersQuery.getParametersCall()}) ;
#end

			// Invocation Builder with all the info from web target
			Invocation.Builder invocationBuilder = webTarget.request(${contentTypeOutboundServer}) ;

#if (${outputParametersHeader.getParametersList().size()} > 0)
			// Add all the "header" values
			invocationBuilder 					 = this.${operationId}HeaderAssignment(invocationBuilder, ${outputParametersHeader.getParametersCall()}) ;		
#end

			// Depending on the request type, then we must add parameters or not
#if ($pathOperation == "HEAD" || $pathOperation == "DELETE" || $pathOperation == "GET" || $pathOperation == "OPTIONS")
			final Response response = invocationBuilder.${pathOperation.toLowerCase()}() ;
#elseif ($pathOperation == "POST" || $pathOperation == "PUT")
#if (${outputParameterBody.getParametersList().size()} > 0) ## There is only one parameter of this type (if exists)
			final Response response = invocationBuilder.${pathOperation.toLowerCase()}(Entity.entity(${outputParameterBody.getParametersList().get(0).getName()}, ${contentTypeInboundServer})) ;
#else
#if (${outputParametersFormData.getParametersList().size()} > 0)
			// Add the "formData" values
			final FormDataMultiPart form = new FormDataMultiPart() ;
			form.setMediaType(MediaType.valueOf(${contentTypeInboundServer})) ;
			this.${operationId}FormDataAssignment(form, ${outputParametersFormData.getParametersCall()}) ;
#else
			// Set default "form"
			final Form form = new Form() ;
#end
			final Response response = invocationBuilder.${pathOperation.toLowerCase()}(Entity.entity(form, ${contentTypeInboundServer})) ;
#end
#end

			if (response.getStatus() == 200)
			{	
#if (${returnTypeField} == "void")
				this.restListener.${operationId}() ;
#else
				final ${returnTypeField} outcome = response.readEntity(${returnTypeField}.class) ;
				this.restListener.${operationId}(outcome) ;
#end
			}
			else
			{
				this.restListener.${operationId}HttpError(response.getStatus()) ;
			}
		}
	}
	
	/**
	 * Validate the input scheme with the expected for this 
	 * @param scheme with the scheme
	 */
	private boolean ${operationId}ValidateScheme(final ${schemesValuesClassName} scheme)
	{
#set($validateSchemeComparison = "")
#foreach($availableScheme in $availableSchemes)
#if (${validateSchemeComparison} == "")
#set($validateSchemeComparison = "scheme.equals(${schemesValuesClassName}.${availableScheme})")
#else
#set($validateSchemeComparison = "${validateSchemeComparison} || scheme.equals(${schemesValuesClassName}.${availableScheme})")
#end
#end
		return ${validateSchemeComparison} ;
	}

#if (${outputParametersPath.getParametersList().size()} > 0)

	/**
	 * The following method assign every path parameter to the WebTarget
     */	 
	private WebTarget ${operationId}PathAssignment(WebTarget webTarget, ${outputParametersPath.getParametersHeader()})
	{
#foreach($pathParameter in ${outputParametersPath.getParametersList()})
		webTarget = webTarget.resolveTemplate("${pathParameter.getName()}", ${pathParameter.getName()}) ;
#end

		return webTarget ;
	}

#end
#if (${outputParametersQuery.getParametersList().size()} > 0)

	/**
	 * The following method assign every query parameter with the value
     */	
	private WebTarget ${operationId}QueryAssignment(WebTarget webTarget, ${outputParametersQuery.getParametersHeader()})
	{
#foreach($queryParameter in ${outputParametersQuery.getParametersList()})
#set($item = ${queryParameter.getItem()})
#if ($item.class.simpleName == "ItemArray")
##
#set($depthArray = ${outputLanguageItems.calculateDepth(${item})})
## Call the macro with the array parameters
#generateArrayQueryParameters($depthArray ${queryParameter.getName()})
##
#else
		webTarget = webTarget.queryParam("${queryParameter.getName()}", ${queryParameter.getName()}) ;
#end
#end

		return webTarget ;
	}

#end
#if (${outputParametersHeader.getParametersList().size()} > 0)

	/**
	 * The following method assign every header parameter with the value
     */	
	private Invocation.Builder ${operationId}HeaderAssignment(Invocation.Builder invocationBuilder, ${outputParametersHeader.getParametersHeader()})
	{
#foreach($headerParameter in ${outputParametersHeader.getParametersList()})
		invocationBuilder.header("${headerParameter.getName()}", ${headerParameter.getName()}) ;
#end

		return invocationBuilder ;
	}

#end
#if (${outputParametersFormData.getParametersList().size()} > 0)
	/**
	 * The following method assign every formData parameter with the value
     */	
	private void ${operationId}FormDataAssignment(FormDataMultiPart formDataMultiPart, ${outputParametersFormData.getParametersHeader()})
	{
#foreach($formDataParameter in ${outputParametersFormData.getParametersList()})	
#set($item = ${formDataParameter.getItem()})
#if ($item.class.simpleName == "ItemArray")
##
#set($depthArray    = ${outputLanguageItems.calculateDepth(${item})})
#set($typeBaseArray = ${outputLanguageItems.calculateBaseType(${item})})
## Call the macro with the array parameters
#generateArrayFormDataParameters($depthArray $typeBaseArray ${formDataParameter.getName()})
##
#else
		#generateSingleFormDataParameters($item ${formDataParameter.getName()} '')
#end
#end        
	}
#end

