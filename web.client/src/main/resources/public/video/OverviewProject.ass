[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Scroll Position: 74
Active Line: 99

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,Bienvenidos a todos!
Dialogue: 0,0:00:03.00,0:00:06.00,Default,,0,0,0,,Mi nombre es Francisco Manuel Benítez
Dialogue: 0,0:00:06.00,0:00:09.00,Default,,0,0,0,,y voy a realizar una breve introducción
Dialogue: 0,0:00:09.00,0:00:12.00,Default,,0,0,0,,acerca del proyecto API Rest Generator
Dialogue: 0,0:00:12.50,0:00:15.50,Default,,0,0,0,,En ella, trataremos los siguientes puntos
Dialogue: 0,0:00:15.50,0:00:20.00,Default,,0,0,0,,Como primer punto: el porqué se ha desarrollado este proyecto.
Dialogue: 0,0:00:20.00,0:00:24.00,Default,,0,0,0,,Como segundo punto: hablaremos de un fichero con el que seremos
Dialogue: 0,0:00:24.00,0:00:28.00,Default,,0,0,0,,capaces de definir una especificación común, que nos ayudará
Dialogue: 0,0:00:28.00,0:00:29.00,Default,,0,0,0,,a generar código.
Dialogue: 0,0:00:29.00,0:00:32.50,Default,,0,0,0,,Como tercer punto: a partir de la especificación anterior
Dialogue: 0,0:00:32.50,0:00:35.50,Default,,0,0,0,,veremos qué tipos de generaciones de código existen
Dialogue: 0,0:00:35.50,0:00:39.00,Default,,0,0,0,,Y por último, explicaré como ese código generado
Dialogue: 0,0:00:39.00,0:00:41.00,Default,,0,0,0,,viene empaquetado.
Dialogue: 0,0:00:43.00,0:00:45.00,Default,,0,0,0,,Comenzamos pues por el primer punto
Dialogue: 0,0:00:45.00,0:00:49.50,Default,,0,0,0,,En general, un desarrollador dedica demasiado tiempo
Dialogue: 0,0:00:49.50,0:00:53.00,Default,,0,0,0,,a entender como funcionan ciertos frameworks.
Dialogue: 0,0:00:53.00,0:00:56.50,Default,,0,0,0,,Se encuentra con tiempos de entrega muy cortos
Dialogue: 0,0:00:56.50,0:01:00.00,Default,,0,0,0,,con lo que investigar el funcionamiento de estas librerías
Dialogue: 0,0:01:00.00,0:01:01.50,Default,,0,0,0,,se reduce mucho.
Dialogue: 0,0:01:01.50,0:01:05.50,Default,,0,0,0,,En el caso del mundo “REST”, existen multitud de librerías que permiten
Dialogue: 0,0:01:05.50,0:01:09.50,Default,,0,0,0,,la comunicación entre cliente-servidor, y hay veces que al elegir una
Dialogue: 0,0:01:09.50,0:01:13.50,Default,,0,0,0,,resulta que cuando la aplicamos sobre una arquitectura determinada,
Dialogue: 0,0:01:13.50,0:01:15.50,Default,,0,0,0,,no funciona correctamente.
Dialogue: 0,0:01:15.50,0:01:20.50,Default,,0,0,0,,Finalmente, cuando trabajamos con distintos equipos o departamentos,
Dialogue: 0,0:01:20.50,0:01:23.50,Default,,0,0,0,,nos encontramos situaciones en las que mientras uno
Dialogue: 0,0:01:23.50,0:01:25.50,Default,,0,0,0,,de los equipos implicados
Dialogue: 0,0:01:25.50,0:01:28.50,Default,,0,0,0,,no finalice su desarrollo, no podremos continuar
Dialogue: 0,0:01:28.50,0:01:34.00,Default,,0,0,0,,es decir, que ni existen “mocks” desde su parte que nos ayuden a progresar,
Dialogue: 0,0:01:34.00,0:01:39.00,Default,,0,0,0,,ni tampoco existe una definición común sobre los puntos de acceso REST
Dialogue: 0,0:01:39.00,0:01:41.00,Default,,0,0,0,,sobre los que actuar.
Dialogue: 0,0:01:42.00,0:01:43.00,Default,,0,0,0,,Por ello
Dialogue: 0,0:01:43.00,0:01:47.00,Default,,0,0,0,,que ofrecemos con nuestro proyecto:
Dialogue: 0,0:01:47.00,0:01:50.00,Default,,0,0,0,,Imaginaos una Web donde introduces una especificación
Dialogue: 0,0:01:50.00,0:01:52.50,Default,,0,0,0,,y con un simple click ya tienes generada
Dialogue: 0,0:01:52.50,0:01:55.50,Default,,0,0,0,,toda la interacción REST cliente o servidora.
Dialogue: 0,0:01:55.50,0:01:59.50,Default,,0,0,0,,Imaginaos una Web que te provee distintos códigos generados,
Dialogue: 0,0:01:59.50,0:02:02.50,Default,,0,0,0,,que funcionarán en las actuales arquitecturas del BBVA
Dialogue: 0,0:02:02.50,0:02:05.00,Default,,0,0,0,,tales como ePhoenix o Nova.
Dialogue: 0,0:02:05.00,0:02:09.00,Default,,0,0,0,,Imaginaos que ya no tenéis que conocer qué es una anotación REST
Dialogue: 0,0:02:09.00,0:02:12.00,Default,,0,0,0,,cómo se define un endpoint en una librería como JAXRS
Dialogue: 0,0:02:12.00,0:02:15.00,Default,,0,0,0,,y que además, con el código generado, 
Dialogue: 0,0:02:15.00,0:02:19.00,Default,,0,0,0,,recibirás un ejemplo con todas las posibles llamadas definidas.
Dialogue: 0,0:02:19.00,0:02:21.00,Default,,0,0,0,,Esto es:
Dialogue: 0,0:02:21.00,0:02:26.00,Default,,0,0,0,,una especificación común para que los equipos puedan trabajar juntos
Dialogue: 0,0:02:26.00,0:02:28.00,Default,,0,0,0,,y avanzar sin retrasos
Dialogue: 0,0:02:28.00,0:02:29.00,Default,,0,0,0,,Esto es:
Dialogue: 0,0:02:29.00,0:02:32.00,Default,,0,0,0,,la no necesidad de conocer que es REST,
Dialogue: 0,0:02:32.00,0:02:35.00,Default,,0,0,0,,simplemente, incluir una dependencia.
Dialogue: 0,0:02:41.00,0:02:42.50,Default,,0,0,0,,Prosigamos
Dialogue: 0,0:02:42.50,0:02:45.00,Default,,0,0,0,,A continuación hablaremos de ese fichero
Dialogue: 0,0:02:45.00,0:02:47.50,Default,,0,0,0,,que nos “gobernará a todos”
Dialogue: 0,0:02:49.00,0:02:53.00,Default,,0,0,0,,CTO apuesta por Swagger como especificación común
Dialogue: 0,0:02:53.00,0:02:56.50,Default,,0,0,0,,a todos los equipos que quieran trabajar con servicios REST.
Dialogue: 0,0:02:56.50,0:02:58.50,Default,,0,0,0,,Pero…¿Qué es Swagger?
Dialogue: 0,0:02:58.50,0:03:01.00,Default,,0,0,0,,No es más que una representación simple,
Dialogue: 0,0:03:01.00,0:03:04.00,Default,,0,0,0,,a la vez que potente, de una API REST.
Dialogue: 0,0:03:04.00,0:03:08.50,Default,,0,0,0,,Si nos fijamos en este ejemplo simplificado de especificación REST
Dialogue: 0,0:03:08.50,0:03:11.50,Default,,0,0,0,,lo que estamos definiendo aquí es:
Dialogue: 0,0:03:11.50,0:03:16.00,Default,,0,0,0,,Un endpoint bajo “http://localhost:8080/”
Dialogue: 0,0:03:16.00,0:03:20.00,Default,,0,0,0,,que cuando se haga una petición HTTP tipo “GET”
Dialogue: 0,0:03:20.00,0:03:25.00,Default,,0,0,0,,acabará ejecutándose una operación con nombre “myOperationName”
Dialogue: 0,0:03:25.00,0:03:30.00,Default,,0,0,0,,y si todo va bien, nos devolverá una respuesta con código “200”
Dialogue: 0,0:03:33.00,0:03:35.00,Default,,0,0,0,,Pasemos al siguiente punto, que es...
Dialogue: 0,0:03:35.00,0:03:37.50,Default,,0,0,0,,¿Qué tipo de generaciones de código poseemos?
Dialogue: 0,0:03:40.00,0:03:41.00,Default,,0,0,0,,Pues muy sencillo
Dialogue: 0,0:03:41.00,0:03:43.00,Default,,0,0,0,,para esta versión del proyecto,
Dialogue: 0,0:03:43.00,0:03:46.00,Default,,0,0,0,,tendremos dos generaciones para la parte servidora
Dialogue: 0,0:03:46.00,0:03:48.00,Default,,0,0,0,,y otras dos para la parte cliente.
Dialogue: 0,0:03:49.00,0:03:53.00,Default,,0,0,0,,Para la parte servidora, “Spring MVC” está diseñado para funcionar
Dialogue: 0,0:03:53.00,0:03:56.00,Default,,0,0,0,,en la nueva arquitectura NOVA, 
Dialogue: 0,0:03:56.00,0:04:00.00,Default,,0,0,0,,y “JAX-RS” está diseñado para funcionar dentro de ePhoenix.
Dialogue: 0,0:04:00.00,0:04:03.50,Default,,0,0,0,,En ambos casos, tendrán compatibilidad total
Dialogue: 0,0:04:03.50,0:04:07.00,Default,,0,0,0,,con los clientes “Javascript” y “JAX-RS”.
Dialogue: 0,0:04:09.50,0:04:11.50,Default,,0,0,0,,Llegado a este punto,
Dialogue: 0,0:04:11.50,0:04:14.50,Default,,0,0,0,,lo último que nos falta es saber que recibiremos
Dialogue: 0,0:04:14.50,0:04:18.50,Default,,0,0,0,,cuando lancemos nuestra especificación sobre la Web.
Dialogue: 0,0:04:20.50,0:04:24.50,Default,,0,0,0,,Exceptuando el cliente “Javascript” que lo dejaremos para el final,
Dialogue: 0,0:04:24.50,0:04:28.50,Default,,0,0,0,,todas las demás generaciones (ya sean cliente o servidor) son “Java”
Dialogue: 0,0:04:29.00,0:04:30.00,Default,,0,0,0,,De esta forma,
Dialogue: 0,0:04:30.00,0:04:33.50,Default,,0,0,0,,como parte común a todas las generaciones Java,
Dialogue: 0,0:04:33.50,0:04:37.00,Default,,0,0,0,,tendremos un JAR que nos encapsulará toda la información
Dialogue: 0,0:04:37.00,0:04:39.00,Default,,0,0,0,,acerca del modelo de datos.
Dialogue: 0,0:04:39.00,0:04:40.00,Default,,0,0,0,,Después de esto,
Dialogue: 0,0:04:40.00,0:04:42.00,Default,,0,0,0,,para la generación específica,
Dialogue: 0,0:04:42.00,0:04:45.50,Default,,0,0,0,,siempre tendremos distintos JARs que son:
Dialogue: 0,0:04:45.50,0:04:49.00,Default,,0,0,0,,la interfaz REST, su implementación y en ciertos casos
Dialogue: 0,0:04:49.00,0:04:52.00,Default,,0,0,0,,(como la generación del servidor “JAX-RS”)
Dialogue: 0,0:04:52.00,0:04:56.00,Default,,0,0,0,,JARs de librerías de terceros necesarias dentro de ePhoenix.
Dialogue: 0,0:04:56.00,0:04:57.00,Default,,0,0,0,,Por último,
Dialogue: 0,0:04:57.00,0:05:01.00,Default,,0,0,0,,un proyecto Java con un ejemplo que nos ayudará a no partir de cero
Dialogue: 0,0:05:01.00,0:05:03.00,Default,,0,0,0,,y que además,
Dialogue: 0,0:05:03.00,0:05:06.00,Default,,0,0,0,,nos ayudará en fases tempranas a verificar
Dialogue: 0,0:05:06.00,0:05:09.50,Default,,0,0,0,,que todas las peticiones están funcionando correctamente.
Dialogue: 0,0:05:09.50,0:05:13.50,Default,,0,0,0,,Volviendo de nuevo al caso especial de Javascript,
Dialogue: 0,0:05:13.50,0:05:17.00,Default,,0,0,0,,aquí tendremos, en lugar de JARs empaquetados,
Dialogue: 0,0:05:17.00,0:05:20.50,Default,,0,0,0,,distintas carpetas donde estará todo el código generado
Dialogue: 0,0:05:20.50,0:05:23.00,Default,,0,0,0,,(modelos, cliente REST y los ejemplos)
Dialogue: 0,0:05:23.50,0:05:25.50,Default,,0,0,0,,Dicho esto,
Dialogue: 0,0:05:25.50,0:05:27.50,Default,,0,0,0,,damos por finalizada la explicación
Dialogue: 0,0:05:27.50,0:05:32.50,Default,,0,0,0,,y os animamos a ver otras presentaciones dentro de este mismo menú.
