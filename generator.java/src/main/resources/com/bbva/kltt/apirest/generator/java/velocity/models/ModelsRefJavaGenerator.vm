/*********************************************************************************************************************************
 This class has been automatically generated using KLTT-APIRestGenerator project, don't do manual file modifications.
 ${now}

 "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;
  and to You under the Apache License, Version 2.0. "
**********************************************************************************************************************************/

package ${packageName} ;

import com.fasterxml.jackson.annotation.JsonProperty ;
import org.apache.commons.lang3.builder.HashCodeBuilder ;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.core.JsonProcessingException;

#foreach($additionalImport in $additionalImports)
import ${additionalImport} ;
#end

#if (! $classDescription)
/**
 * No description for the class
 */
#else
/** 
 * $classDescription
 */
#end
##
public final class ${className} implements ${iGeneratedModelClassName}
{
##
##
## Setting the common parameters
##
#set($formattedAttrName = ${outputLanguageNaming.prefixAttributeName(${attributeRef})})
#set($attributeType     = ${outputLanguageNaming.prefixClassName(${attributeRef})})
#set($suffixMethodName  = ${outputLanguageNaming.suffixMethodName(${attributeRef})})

	/** Attribute description */
    @JsonView(GenerationView.class)
	private $attributeType ${formattedAttrName} ;

	/**
	 * Empty constructor for the class
	 */
	public ${className}()
	{
		// Empty constructor
	}
	
	/**
	 * Cloning object constructor
	 * @param target with the instance to be cloned
	 */
	public ${className}(final ${className} target)
	{
		this.${formattedAttrName} = target.${formattedAttrName} ;
	}

	/**
	 * @param ${formattedAttrName} the ${formattedAttrName} to set
	 */
	public void set${suffixMethodName}(final ${attributeType} ${formattedAttrName})
	{
		this.${formattedAttrName} = ${formattedAttrName} ;
	}
	
	/**
	 * @return the ${formattedAttrName}
	 */
	@JsonProperty("${formattedAttrName}")
	public ${attributeType} get${suffixMethodName}()
	{
		return this.${formattedAttrName} ;
	}
	
	@Override
	public boolean equals(final Object aThat)
	{
		if (this == aThat) return true ;
		
		if (aThat == null) return false ;
		
		if (aThat.getClass() != this.getClass()) return false ;
		
		${className} target = (${className}) aThat ;

		if (this.${formattedAttrName} != null && !this.${formattedAttrName}.equals(target.${formattedAttrName}))
		{
			return false ;
		}

		return true ;
	}

	@Override
	public int hashCode()
	{
		final HashCodeBuilder builder = new HashCodeBuilder() ;
		
		builder.append(this.${formattedAttrName}) ;

		return builder.toHashCode() ;
	}
	
	@Override
    public String toString()
    {
		try
	    {
	      return ${jacksonMapperClassName}.getInstance().writerWithDefaultPrettyPrinter().writeValueAsString(this);
	    }
	    catch (JsonProcessingException jsonProcessingExc)
	    {
	      return "Exception converting to Json string: " + jsonProcessingExc.getMessage() ;
	    }
    }
    
	public void fillRandomly(int maxArraySize, boolean clear, int currentRecursiveCall, int maxRecursiveCalls)
	{
		if (clear)
		{
			this.clear() ;
		}

	    currentRecursiveCall++ ;
		java.util.Random rnd = new java.util.Random() ;
		
		if (currentRecursiveCall < maxRecursiveCalls)
		{
			this.${formattedAttrName} = new ${attributeType}() ;
			this.${formattedAttrName}.fillRandomly(maxArraySize, clear, currentRecursiveCall, maxRecursiveCalls) ;
		}
	}
	
	public void clear()
	{
		this.${formattedAttrName} = null ;
	}
}
