/*********************************************************************************************************************************
 This class has been automatically generated using KLTT-APIRestGenerator project, don't do manual file modifications.
 ${now}

 "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;
  and to You under the Apache License, Version 2.0. "
**********************************************************************************************************************************/

package ${packageName} ;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * ------------------------------------------------
 * @author Francisco Manuel Benitez Chico
 * ------------------------------------------------
 */
public class ${className} extends ObjectMapper 
{
	/** Serial Version UID */
	private static final long serialVersionUID = 3753496109727081103L ;
	
	/** Private static instance */
	private static ObjectMapper INSTANCE = new JacksonMapper() ;

	public static ObjectMapper getInstance()
	{
		return INSTANCE ;
	}

	/**
	 * Private constructor
	 */
	private ${className}()
	{
		this.setDefaultTyping(new FilteredTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL).init(JsonTypeInfo.Id.MINIMAL_CLASS, null)
																							  	   .inclusion(JsonTypeInfo.As.WRAPPER_OBJECT)) ;
		this.setSerializationInclusion(JsonInclude.Include.NON_NULL) ;
		this.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false) ;

		this.setConfig(getSerializationConfig().withView(JacksonViews.GenerationView.class)) ;
	}

	protected static class FilteredTypeResolverBuilder extends DefaultTypeResolverBuilder
	{
		/** Serial Version UID */
		private static final long serialVersionUID = -8145899696439248804L ;

		/**
		 * @param defaultTyping with the default typing
		 */
		public FilteredTypeResolverBuilder(final DefaultTyping defaultTyping)
		{
			super(defaultTyping) ;
		}

		/**
		 * @param javaTypeSource with the java type
		 * @return true if it is an expected java type
		 */
		public boolean useForType(final JavaType javaTypeSource)
		{
			return super.useForType(javaTypeSource) ;
		}
	}
}
