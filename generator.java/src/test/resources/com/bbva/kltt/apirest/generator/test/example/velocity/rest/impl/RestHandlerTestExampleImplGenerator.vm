/*********************************************************************************************************************************
 This class has been automatically generated using KLTT-APIRestGenerator project, don't do manual file modifications.
 ${now}

 "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;
  and to You under the Apache License, Version 2.0. "
**********************************************************************************************************************************/

package ${packageName} ;

import java.io.ByteArrayInputStream ;
import java.io.PrintWriter ;
import java.io.StringWriter ;

import org.springframework.http.ResponseEntity ;
import org.springframework.http.HttpStatus;

import org.springframework.core.io.InputStreamResource ;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass ;
import org.springframework.beans.factory.annotation.Autowired ;

import org.springframework.web.multipart.MultipartFile ;
import org.springframework.web.bind.annotation.* ;

#foreach($additionalImport in $additionalImports)
import ${additionalImport} ;
#end

/**
 * ------------------------------------------------
 * @author Francisco Manuel Benitez Chico
 * ------------------------------------------------
 */
## Request Mapping parameters
#set($basePath   	 = ${outputLanguageRootValues.getBasePath()})
#set($globalConsumes = ${outputLanguageConsumesProduces.generateInboundServerContentType()})
#set($globalProduces = ${outputLanguageConsumesProduces.generateOutboundServerContentType()})
##
##
@RequestMapping(value = "${basePath}"#if($globalConsumes), consumes = ${globalConsumes}#end#if($globalProduces), produces = ${globalProduces}#end)
@RestController
@CrossOrigin
@ConditionalOnClass(${restListenerInterfaceName}.class)
public final class ${className} implements ${restHandlerInterfaceName}
{
	/** Attribute - Rest Listener */
	@Autowired
	private ${restListenerInterfaceName} restListener ;

	/**
	 * Public constructor
	 */
    public ${className}()
    {
	    // Empty constructor because of Spring depedency
    }

#foreach($pathValue in ${outputLanguagePaths.getPathValues()})
## DELETE
#set($pathOperation = "DELETE")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersTestExampleImplTemplate})
#end
## GET
#set($pathOperation = "GET")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersTestExampleImplTemplate})
#end
## HEAD
#set($pathOperation = "HEAD")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersTestExampleImplTemplate})
#end
## OPTIONS
#set($pathOperation = "OPTIONS")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersTestExampleImplTemplate})
#end
## PATCH
#set($pathOperation = "PATCH")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersTestExampleImplTemplate})
#end
## POST
#set($pathOperation = "POST")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersTestExampleImplTemplate})
#end
## PUT
#set($pathOperation = "PUT")
#if (${outputLanguageOperations.hasAnyOperationId($pathValue, $pathOperation)})
#parse(${RestHandlerMethodHeadersTestExampleImplTemplate})
#end
#end

	/**
	 * @param exception with the exception to convert to String
	 * @return stack trace converted to string
	 */
	private String getStackTrace(final Exception exception)
	{
		final StringWriter stringWriter = new StringWriter() ;
		final PrintWriter printWriter   = new PrintWriter(stringWriter) ;
		exception.printStackTrace(printWriter) ;
		
		return stringWriter.toString() ; 
	}
}
