## Operation identifier
#set($operationId      		  = ${outputLanguageOperations.getOperationId(${pathValue}, ${pathOperation})})
##
##
## Return type
#set($outboundServerType      = ${outputLanguageItems.getOutboundServerItemType(${pathValue}, ${pathOperation})})
#set($outboundServerTypeField = ${outputLanguageItems.getFullTypeOutput(${outboundServerType.item})})
##
##
## Common Exceptions
#set($commonException  		  = ${outputLanguageExceptions.getCommonException()}) 
##
## Custom Exceptions
#set($customExceptions 		  = ${outputLanguageExceptions.getCustomExceptionsList(${pathValue}, ${pathOperation})})
##
	// Subject Listener for the operationId '${operationId}'
	${operationId}Subject:Subject<any> = new Subject<any>() ;
	
	/**
	 * Successful call
	 */
	${operationId}(#if (${outboundServerTypeField} != "void")outcome: ${outboundServerTypeField}#end)
	{
#if (${outboundServerTypeField} == "void")	
		var executedMethod = true ;
		this.${operationId}Subject.next(executedMethod) ;
#else
		this.${operationId}Subject.next(outcome) ;
#end
	}

	// Subject Listener for the '${commonException.getAsMethodName(${operationId})}'
	${commonException.getAsMethodName(${operationId})}Subject:Subject<any> = new Subject<any>() ;

	/**
	 * Common error call - ${commonException.getAsClassName()}
	 * @param commonException with the common exception
	 */
	${commonException.getAsMethodName(${operationId})}(outcome: ${commonException.getAsClassName()})
	{
		this.${commonException.getAsMethodName(${operationId})}Subject.next(outcome) ;
	}
#foreach($customException in $customExceptions)
#set($customExceptionTypeField = ${outputLanguageItems.getFullTypeOutput($customException.getResponseItem())})

	// Subject Listener for the '${customException.getAsMethodName()}'
	${customException.getAsMethodName()}Subject:Subject<any> = new Subject<any>() ;

	/**
	 * Custom exception call - ${customException.getAsMethodName()}
	 */
	${customException.getAsMethodName()}(#if (${customExceptionTypeField} != "void")outcome: ${customExceptionTypeField}#end)
	{
#if (${customExceptionTypeField} == "void")	
		var executedMethod = true ;
		this.${customException.getAsMethodName()}Subject.next(executedMethod) ;
#else
		this.${customException.getAsMethodName()}Subject.next(outcome) ;
#end	
	}

#end

