<?xml version="1.0" encoding="UTF-8"?>
<project name="apirest_generator" default="compress-deliverables-directory">

<!-- ########################################################################################## -->
<!-- ################################ PROPERTIES ############################################## -->
<!-- ########################################################################################## -->

	<property name="cfg.dir"     location="config" />
	<property name="static.dir"  location="static/${translatorType}" />
	<property name="lib.dir"     location="lib" />
	<property name="modules.dir" location="modules"/>
	<property name="build.dir"   location="build"/>
	<property name="codegen.dir" location="${build.dir}/codegen/${codeGenOutputDirectory}"/>
	<property name="deliver.dir" location="${codegen.dir}/deliverables" />

<!-- ########################################################################################## -->
<!-- ################################ CLASSPATHS ############################################## -->
<!-- ########################################################################################## -->

	<!-- Classpath that contains the generator JAR with all embeded dependencies -->
	<path id="generator.classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
		<fileset dir="${modules.dir}" includes="*.jar" />
	</path>

<!-- ########################################################################################## -->
<!-- ################################ RUN GENERATION ########################################## -->
<!-- ########################################################################################## -->

	<target name="run-swagger-generator" description="Calls the Swagger generator.">
		<java classname="${fullPackageLauncherClass}" failonerror="true" fork="true" classpathref="generator.classpath">
			<arg value="-f ${specificationFilePath}" />
			<arg value="-o ${codegen.dir}" />
			<arg value="-p ${parserType}"/>
			<jvmarg value="-Xms600m" />
			<jvmarg value="-Xmx600m" />
			<jvmarg value="-XX:MaxPermSize=128m" />
			<jvmarg value="-ea" />
			<jvmarg value="-Dlogback.configurationFile=${cfg.dir}/logback.xml" />
<!--		<jvmarg value="-Xdebug"/> -->
<!--		<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5432" /> -->
		</java>
	</target>

<!-- ########################################################################################## -->
<!-- ########################### COMPILE AND INSTALL GENERATED CODE ########################### -->
<!-- ########################################################################################## -->

	<target name="copy-static-typing-dependencies" depends="run-swagger-generator" description="Copy the static dependencies to compile the Angular2 files.">
		<copy todir="${codegen.dir}/${translatorType}">
	    	<fileset dir="${static.dir}"/>
	  	</copy>
	</target>
	
	<target name="run-npm-install" depends="copy-static-typing-dependencies" description="run 'npm install' to get all the external dependencies.">
		<exec dir="${codegen.dir}/${translatorType}" executable="cmd" failonerror="true">
			 <arg value="/c"/>
			 <arg value="npm install"/>
		</exec>
	</target>
	
    <target name="run-npm-install-linux" depends="copy-static-typing-dependencies" description="run 'npm install' to get all the external dependencies for Linux.">
		<exec dir="${codegen.dir}/${translatorType}" executable="/bin/sh" failonerror="true">
            <arg value="-c"/>
            <arg value="npm install"/>
        </exec>
    </target>
	
	<target name="run-npm-run-tsc-compiler" depends="run-npm-install" description="run 'npm run tsc' to compile the output code.">
		<exec dir="${codegen.dir}/${translatorType}" executable="cmd" failonerror="true">
			 <arg value="/c"/>
			 <arg value="npm run tsc"/>
		</exec>
	</target>

    <target name="run-npm-run-tsc-compiler-linux" depends="run-npm-install-linux" description="run 'npm run tsc' to compile the output code for Linux.">
		<exec dir="${codegen.dir}/${translatorType}" executable="/bin/sh" failonerror="true">
            <arg value="-c"/>
            <arg value="npm run tsc"/>
        </exec>
    </target>
	
<!-- ########################################################################################## -->
<!-- ############ COPY GENERATED CODE TO THE DELIVERABLES DIRECTORY AND COMPRESS ############## -->
<!-- ########################################################################################## -->
	
	<target name="copy-deliverables-directory" depends="run-npm-run-tsc-compiler" description="Copy the generated code to the deliverables directory.">
		<mkdir dir="${deliver.dir}"/>
		
		<copy todir="${deliver.dir}">
			<fileset dir="${codegen.dir}/${translatorType}" includes="**/*.properties, **/*.json, **/*.yaml, **/*.yml, **/*.ts, **/*.html, **/*.png, *.js">
				<exclude name="**/node_modules/**/*.*"/>
			</fileset>
	  	</copy>
	</target>
	
	<target name="copy-deliverables-directory-linux" depends="run-npm-run-tsc-compiler-linux" description="Copy the generated code to the deliverables directory for Linux.">
		<mkdir dir="${deliver.dir}"/>
		
		<copy todir="${deliver.dir}">
			<fileset dir="${codegen.dir}/${translatorType}" includes="**/*.properties, **/*.json, **/*.yaml, **/*.yml, **/*.ts, **/*.html, **/*.png, *.js">
				<exclude name="**/node_modules/**/*.*"/>
			</fileset>
	  	</copy>
	</target>
	
	<target name="compress-deliverables-directory" depends="copy-deliverables-directory" description="Compress the deliverables directory.">
		<zip destfile="${codegen.dir}/${deliverableFileName}" basedir="${deliver.dir}" />
	</target>
	
	<target name="compress-deliverables-directory-linux" depends="copy-deliverables-directory-linux" description="Compress the deliverables directory for Linux.">
		<zip destfile="${codegen.dir}/${deliverableFileName}" basedir="${deliver.dir}" />
	</target>
	
</project>