##
## -------- Multiple dimensions - Array parser generator --------
## @param formattedAttrName with the formatted attribute name
## @param isSimpleTypeArray true if the $formattedAttrName is a simple type
## @param arrayDepth		with the array depth
## @param arrayBaseType     with the base type of the array
## @param parserMethod 		with the parsed method to be applied
##
#macro(generateArrayParserModels $formattedAttrName $isSimpleTypeArray $arrayDepth $arrayBaseType $parserMethod)

			${formattedAttrName} = [] ;
			
			var length1 = value.${formattedAttrName}.length ;
			for (var i1=0 ; i1 < length1 ; i1++)
			{
#set($arrayDepthStringPos = "[i1]")
				${formattedAttrName}${arrayDepthStringPos} = [] ;
#set($depth = 1)
#if (${arrayDepth} > 1)
#foreach($depth in [2..${arrayDepth}])
		#tabsGenerator($depth)var length${depth} = value.${formattedAttrName}${arrayDepthStringPos}.length ;
		#tabsGenerator($depth)for (var i${depth}=0 ; i${depth} < length${depth} ; i${depth}++)
		#tabsGenerator($depth){
#set($arrayDepthStringPos = "${arrayDepthStringPos}[i${depth}]")
			#tabsGenerator(${depth})${formattedAttrName}${arrayDepthStringPos} = [] ;
#end
#end

#if (${isSimpleTypeArray} == "true")
			#tabsGenerator(${depth})${formattedAttrName}${arrayDepthStringPos} = ${parserValuesClassName}.${parserMethod}(value.${formattedAttrName}${arrayDepthStringPos}) ;
#else
	    	#tabsGenerator(${depth})${formattedAttrName}${arrayDepthStringPos} = ${arrayBaseType}.${parserMethod}(value.${formattedAttrName}${arrayDepthStringPos}) ;
#end
#if (${arrayDepth} > 1)
#foreach($depth in [${arrayDepth}..2])
		#tabsGenerator($depth)}
#end
#end
			}
#end